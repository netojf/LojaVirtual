@inherits ImageUploadBase
@using BlazorInputFile;

<div class="input-group">

  <div class="input-group-prepend">
    <span class="input-group-text" id="inputGroupFileAddon01">
      <i class="fas fa-upload"></i>
    </span>
  </div>

  <div class="custom-file col-6">

    <InputFile class="custom-file-input" OnChange="HandleFileSelected" accept="image/*"></InputFile>

    <label class="custom-file-label" >CLIQUE PARA CARREGAR IMAGENS</label>
  </div>

</div>

@* IMAGEPREVIEW *@
@if (file != null)
{
  @*LoadWarning*@

  <div class="card m-2" style="background-color: crimson;">
    <div class="card-body text-light">
      <h2 style="text-shadow:2px;">Carregando Arquivo</h2>
      <hr />
    </div>

    <div class="row m-1">
      <div class="card-body text-light col-8">
        <h2>@file.Name</h2>
        Tamanho: <strong>@(file.Size / 1000000) megabytes</strong>;
        Tipo: <strong>@file.Type</strong>
        Caminho: <strong>@file.RelativePath</strong>
        <p>Carregando @((100.0 * file.Data.Position / file.Size).ToString("0"))%</p>
      </div>

      <div class="col-4 card-body text-light  justify-content-center align-content-center">
        @if (file.Data.Position != file.Size)
        {
          <h1>Carregando @((100.0 * file.Data.Position / file.Size).ToString("0"))% </h1>
        }
        else
        {
          <h1>CARREGADO!</h1>
        }

      </div>
    </div>
  </div>

  @* ImageView *@
  <div class="container-fluid my-3 p-2" style="background-color: #faed27 ; height: 100%;">
    <div class="row justify-content-center">

      @{
        foreach (var imgData in imagesData)
        {
          <div class="card mx-1 my-2" style="width: 18rem; height: 18rem;background-color:Crimson;">
            <!-- File info -->
            <div class="card-header text-light">@imgData.name</div>

            <div class="card-body" style="width: 100%; height: 100%; max-width: 100%; max-height: 100%; object-fit:contain;">
              <img class="card-img p-1" src="@imgData.string64Data" style="width: 100%; height: 100%; max-width: 100%; max-height: 100%; object-fit:contain;" alt="product">
            </div>
          </div>
        }
      }
    </div>
  </div>

}

@*@code{
  #region Properties and Fields
  protected List<ImageData> imagesData { get; set; } = new List<ImageData>();

  List<Models.Image> _modelImages;

  [Parameter]
  public ICollection<Models.Image> ModelImages { get; set; }


  [Parameter]
  public EventCallback<ICollection<Models.Image>> ModelImagesChanged { get; set; }

  int imageCount = 0;

  protected IFileListEntry file;
  #endregion

  #region Methods
  //todo: make this method for one or multiple files
  protected async Task<ICollection<Models.Image>> HandleFileSelected(IFileListEntry[] files)
  {
    Models.Image _image = new Models.Image();

    file = files.FirstOrDefault();

    using (MemoryStream ms = new MemoryStream((int)file.Size + 1))
    {
      await file.Data.CopyToAsync(ms);
      _image.Data = ms.ToArray();
    }

    _image.ImageName = file.Name;
    string byte64 = Convert.ToBase64String(_image.Data);
    imagesData.Add(new ImageData() { name = _image.ImageName, string64Data = new string("data:image/gif;base64," + byte64) });

    ModelImages.Add(_image);
    _image = new Models.Image();
    imageCount++;
    return ModelImages;
  }
  #endregion
}*@
